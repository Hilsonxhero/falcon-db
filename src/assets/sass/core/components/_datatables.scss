//
// Basic Bootstrap table
//

.hx-card table>tbody>tr:first-child>td {
    padding-top: 1.3125rem;
}

.hx-card table> :not(caption)>*>*:first-child {
    padding-right: 1.3125rem;
    padding-left: 1.3125rem;
}

.table {

    width: 100%;
    margin-bottom: $spacer;
    color: $table-color;
    vertical-align: $table-cell-vertical-align;
    border-color: $table-border-color;

    // Target th & td
    // We need the child combinator to prevent styles leaking to nested tables which doesn't have a `.table` class.
    // We use the universal selectors here to simplify the selector (else we would need 6 different selectors).
    // Another advantage is that this generates less code and makes the selector less specific making it easier to override.
    // stylelint-disable-next-line selector-max-universal
    > :not(caption)>*>* {
        padding: $table-cell-padding-y $table-cell-padding-x;
        // background-color: var(--#{$variable-prefix}table-bg);
        // border-bottom-width: $table-border-width;
        // box-shadow: inset 0 0 0 9999px var(--#{$variable-prefix}table-accent-bg);
    }

    >tbody {
        vertical-align: inherit;
    }

    >thead {
        vertical-align: bottom;

        tr th {
            font-weight: 300;
            background-color: $gray-100;
        }
    }

    // Highlight border color between thead, tbody and tfoot.
    > :not(:last-child)> :last-child>* {
        border-bottom-color: $table-group-separator-color;
    }
}


//
// Change placement of captions with a class
//

.caption-top {
    caption-side: top;
}


//
// Condensed table w/ half padding
//

.table-sm {

    // stylelint-disable-next-line selector-max-universal
    > :not(caption)>*>* {
        padding: $table-cell-padding-y-sm $table-cell-padding-x-sm;
    }
}


// Border versions
//
// Add or remove borders all around the table and between all the columns.
//
// When borders are added on all sides of the cells, the corners can render odd when
// these borders do not have the same color or if they are semi-transparent.
// Therefor we add top and border bottoms to the `tr`s and left and right borders
// to the `td`s or `th`s

.table-bordered {
    > :not(caption)>* {
        border-width: $table-border-width 0;

        // stylelint-disable-next-line selector-max-universal
        >* {
            border-width: 0 $table-border-width;
        }
    }
}

.table-borderless {

    // stylelint-disable-next-line selector-max-universal
    > :not(caption)>*>* {
        border-bottom-width: 0;
    }
}

// Zebra-striping
//
// Default zebra-stripe styles (alternating gray and transparent backgrounds)

.table-striped {
    >tbody>tr:nth-of-type(#{$table-striped-order}) {
        --#{$variable-prefix}table-accent-bg: var(--#{$variable-prefix}table-striped-bg);
        color: var(--#{$variable-prefix}table-striped-color);
    }
}

// Active table
//
// The `.table-active` class can be added to highlight rows or cells

.table-active {
    --#{$variable-prefix}table-accent-bg: var(--#{$variable-prefix}table-active-bg);
    color: var(--#{$variable-prefix}table-active-color);
}

// Hover effect
//
// Placed here since it has to come after the potential zebra striping

.table-hover {
    >tbody>tr:hover {
        --#{$variable-prefix}table-accent-bg: var(--#{$variable-prefix}table-hover-bg);
        color: var(--#{$variable-prefix}table-hover-color);
    }
}


// Table variants
//
// Table variants set the table cell backgrounds, border colors
// and the colors of the striped, hovered & active tables
// @each $color,
// $value in $table-variants {
//     @include table-variant($color, $value);
// }

// Responsive tables
//
// Generate series of `.table-responsive-*` classes for configuring the screen
// size of where your table will overflow.

// @each $breakpoint in map-keys($grid-breakpoints) {
//     $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

//     @include media-breakpoint-down($breakpoint) {
//         .table-responsive#{$infix} {
//             overflow-x: auto;
//             -webkit-overflow-scrolling: touch;
//         }
//     }
// }








//
// DataTables
//

$toolbar-spacing: 1rem 0;

// Base
table.dataTable {
    width: 100% !important;
    margin: 0 !important;

    th {
        // border-bottom-color: $table-border-color;
        text-align: right;
    }
}

// Toolbar
div.dataTables_wrapper div.dataTables_length {
    padding: $toolbar-spacing;
}

div.dataTables_wrapper div.dataTables_filter {
    padding: $toolbar-spacing;
}

div.dataTables_wrapper div.dataTables_info {
    font-weight: $font-weight-bold;
    color: $gray-700;
    padding: $toolbar-spacing;
}

div.dataTables_length+div.dataTables_info {
    margin-left: 1rem;
}

// Pagination
div.dataTables_wrapper div.dataTables_paginate {
    padding: $toolbar-spacing;
    margin-left: 0.5rem;

    .pagination {
        margin: 0;
    }
}

// Selected
table.dataTable tbody>tr.selected,
table.dataTable tbody>tr>.selected {
    background-color: $primary;
}

table.dataTable tbody tr.selected,
table.dataTable tbody th.selected,
table.dataTable tbody td.selected {
    color: $primary-inverse;
}

// Head
table.dataTable>thead>tr> {

    td,
    th {
        &:not(.sorting_disabled) {
            padding-right: 0;
        }
    }
}

// Sorting
table.dataTable>thead {
    .sorting {

        &:after,
        &:before {
            display: none;
        }
    }

    .sorting_asc,
    .sorting_desc {
        vertical-align: middle;

        &:before,
        &:after {
            position: relative;
            opacity: 0;
            display: inline-block;
            width: 0.75rem;
            height: 0.75rem;
            content: " ";
            //top: 50%;
            bottom: auto;
            right: auto;
            left: auto;
            margin-left: 0.5rem;
            //transform: translateY(-50%);
        }

        &:before {
            display: none !important;
        }
    }
}

table.dataTable>thead .sorting_asc:after {
    opacity: 1;
    @include svg-bg-icon(arrow-top, $text-muted);
}

table.dataTable>thead .sorting_desc:after {
    opacity: 1;
    @include svg-bg-icon(arrow-bottom, $text-muted);
}

// Processing
div.dataTables_wrapper {
    .table-responsive {
        position: relative;
    }

    div.dataTables_processing {
        border-radius: 1rem;
        box-shadow: $dropdown-box-shadow;
        background-color: $tooltip-bg;
        color: if(isDarkMode(), $gray-700, $gray-600);
        font-weight: $font-weight-bold;
        margin: 0 !important;
        width: auto;
        padding: 1rem 2rem !important;
        transform: translateX(-50%) translateY(-50%);
    }
}

// Responsive
// table.dataTable.dtr-inline.collapsed>tbody>tr>td.dtr-control,
// table.dataTable.dtr-inline.collapsed>tbody>tr>th.dtr-control {
//     $icon-size: 1.35rem;
//     &:before {
//         top: 50%;
//         left: 0;
//         height: $icon-size;
//         width: $icon-size;
//         line-height: $icon-size;
//         margin-top: -(divide($icon-size, 2));
//         margin-right: divide($icon-size, 2);
//         display: inline-block;
//         position: relative;
//         font-size: 1.05rem;
//         border: 0;
//         box-shadow: none;
//         text-align: center;
//         text-indent: 0 !important;
//         content: "+";
//         color: $gray-700;
//         font-family: $font-family-sans-serif;
//         background-color: $gray-300;
//         border-radius: 1rem;
//     }
// }

// table.dataTable.dtr-inline.collapsed>tbody>tr.parent>td.dtr-control:before,
// table.dataTable.dtr-inline.collapsed>tbody>tr.parent>th.dtr-control:before {
//     content: "-";
//     background-color: $primary;
//     color: $primary-inverse;
// }

table.dataTable>tbody>tr.child span.dtr-title {
    display: inline-block;
    min-width: 100px;
    font-weight: $font-weight-bold;
}

table.dataTable>tbody>tr.child span.dtr-data {
    font-weight: $font-weight-normal;
}